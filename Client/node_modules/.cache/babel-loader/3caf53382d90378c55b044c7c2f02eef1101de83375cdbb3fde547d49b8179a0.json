{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Stefa\\\\OneDrive\\\\Documents\\\\SOFTWARE ENGINEERING PROJECT SPRINT 2\\\\SOFTWARE-ENGINEERING-221\\\\Client\\\\src\\\\Pages\\\\Home\\\\ManageRequests.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport useFetch from './useFetch';\nimport { useEffect } from 'react';\nimport usePatch from './usePatch';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ManageRequests = () => {\n  _s();\n  const locationMapping = {\n    'The Innovation Centre': 'UEA Triangle Car Park',\n    'New Science Building': 'UEA West Car Park',\n    'Norwich Business School': 'UEA West Car Park',\n    'The Enterprise Centre': 'UEA West Car Park',\n    'Uea Law School': 'UEA Main Car Park',\n    'INTO': 'UEA Main Car Park'\n  };\n\n  //create state for parking requests so you can dynamically remove them when they are App / Rej \n  const [requests, setRequests] = useState(null); // Add this line\n  const [parkingSpaces, setParkingSpaces] = useState(null);\n  const {\n    data: fetchData,\n    loading,\n    error\n  } = useFetch('http://localhost:8000/manage-requests');\n  const {\n    patch,\n    patchError\n  } = usePatch('http://localhost:8000/manage-requests');\n  const {\n    data: fetchParkingSpaces\n  } = useFetch('http://localhost:8000/parkingSpaces');\n\n  //initially load the parking requests when the page loads up\n  useEffect(() => {\n    setRequests(fetchData);\n    setParkingSpaces(fetchParkingSpaces);\n  }, [fetchData, fetchParkingSpaces]);\n  const handleApprove = id => {\n    const parkingRequest = requests.find(request => request._id === id);\n    const assignedLocation = locationMapping[parkingRequest.destination];\n    const assignedParkingSpace = parkingSpaces.find(space => space.parkingLot.location === assignedLocation && space.status === 'available');\n    if (!assignedParkingSpace) {\n      toast.error(`No available parking space found for location: ${assignedLocation}`);\n      return;\n    }\n    const updateData = {\n      status: 'approved',\n      assignedSpace: assignedParkingSpace._id\n    };\n    patch(id, updateData);\n    if (!error) {\n      setRequests(requests.filter(request => request._id !== id));\n      toast.success('Parking request has been approved');\n    }\n  };\n  const handleReject = id => {\n    const updateData = {\n      status: 'rejected'\n    };\n    patch(id, updateData);\n    if (!error) {\n      setRequests(requests.filter(request => request._id !== id));\n      toast.success('Parking request has been rejected');\n    }\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error.message]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fetch--container\",\n    children: requests && requests.map(parkingRequest => {\n      const arrivalDateTime = new Date(parkingRequest.arrivalDateTime).toLocaleString();\n      const departureDateTime = new Date(parkingRequest.departureDateTime).toLocaleString();\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"card-title\",\n          children: [\" Parking request id : \", parkingRequest._id, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"card-text\",\n          children: [\"  \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Destination : \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 40\n          }, this), parkingRequest.destination, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"card-text\",\n          children: [\" Arrival Date/Time: \", arrivalDateTime]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"card-text\",\n          children: [\" Departure Date/Time: \", departureDateTime]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \" btn btn-primary\",\n          onClick: () => handleApprove(parkingRequest._id),\n          children: \" Approve\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary\",\n          onClick: () => handleReject(parkingRequest._id),\n          children: \"Reject\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this)]\n      }, parkingRequest._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s(ManageRequests, \"S0Pit9U53cAmzPhCLzMq5qrHG3o=\", false, function () {\n  return [useFetch, usePatch, useFetch];\n});\n_c = ManageRequests;\nexport default ManageRequests;\nvar _c;\n$RefreshReg$(_c, \"ManageRequests\");","map":{"version":3,"names":["React","useState","useFetch","useEffect","usePatch","toast","jsxDEV","_jsxDEV","ManageRequests","_s","locationMapping","requests","setRequests","parkingSpaces","setParkingSpaces","data","fetchData","loading","error","patch","patchError","fetchParkingSpaces","handleApprove","id","parkingRequest","find","request","_id","assignedLocation","destination","assignedParkingSpace","space","parkingLot","location","status","updateData","assignedSpace","filter","success","handleReject","children","fileName","_jsxFileName","lineNumber","columnNumber","message","className","map","arrivalDateTime","Date","toLocaleString","departureDateTime","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Stefa/OneDrive/Documents/SOFTWARE ENGINEERING PROJECT SPRINT 2/SOFTWARE-ENGINEERING-221/Client/src/Pages/Home/ManageRequests.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport useFetch from './useFetch';\r\nimport { useEffect } from 'react';\r\nimport usePatch from './usePatch';\r\n\r\nimport {toast} from 'react-toastify'\r\n\r\nconst ManageRequests = () => {\r\n\r\n\r\n  const locationMapping = {\r\n    'The Innovation Centre': 'UEA Triangle Car Park',\r\n    'New Science Building': 'UEA West Car Park',\r\n    'Norwich Business School': 'UEA West Car Park',\r\n    'The Enterprise Centre': 'UEA West Car Park',\r\n    'Uea Law School': 'UEA Main Car Park',\r\n    'INTO': 'UEA Main Car Park'\r\n  };\r\n  \r\n\r\n\r\n\r\n\r\n//create state for parking requests so you can dynamically remove them when they are App / Rej \r\n  const [requests, setRequests] = useState(null); // Add this line\r\n  const [parkingSpaces, setParkingSpaces] = useState(null)\r\n\r\n\r\n\r\n  const { data: fetchData, loading, error } = useFetch('http://localhost:8000/manage-requests');\r\n  const {patch, patchError } = usePatch('http://localhost:8000/manage-requests');\r\n  const { data: fetchParkingSpaces } = useFetch('http://localhost:8000/parkingSpaces');\r\n\r\n//initially load the parking requests when the page loads up\r\n  useEffect(() => {\r\n    setRequests(fetchData); \r\n    setParkingSpaces(fetchParkingSpaces)\r\n    \r\n}, [fetchData, fetchParkingSpaces]);\r\n\r\n  const handleApprove = (id) =>{\r\n\r\n    const parkingRequest = requests.find(request => request._id === id);\r\n    const assignedLocation = locationMapping[parkingRequest.destination]\r\n\r\n    const assignedParkingSpace = parkingSpaces.find(space => space.parkingLot.location === assignedLocation\r\n      && space.status === 'available'\r\n    );\r\n\r\n    if (!assignedParkingSpace) {\r\n      toast.error(`No available parking space found for location: ${assignedLocation}`);\r\n      return;\r\n    }\r\n\r\n\r\n    const updateData = {\r\n      status: 'approved',\r\n      assignedSpace: assignedParkingSpace._id\r\n    };\r\n    patch(id, updateData);\r\n    if(!error){\r\n      setRequests(requests.filter( request => request._id !== id));\r\n      toast.success('Parking request has been approved')\r\n    }\r\n\r\n\r\n  }\r\n  const handleReject = (id)=>{\r\n    const updateData = {status: 'rejected'}\r\n    patch(id, updateData);\r\n    if(!error){\r\n      setRequests(requests.filter( request => request._id !== id));\r\n      toast.success('Parking request has been rejected')\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  if (loading) return <div>Loading...</div>;\r\n  if (error) return <div>Error: {error.message}</div>;\r\n\r\n  return (\r\n    <div className='fetch--container'>\r\n      {requests && requests.map(parkingRequest => {\r\n        const arrivalDateTime = new Date(parkingRequest.arrivalDateTime).toLocaleString();\r\n        const departureDateTime = new Date(parkingRequest.departureDateTime).toLocaleString();\r\n\r\n        return (\r\n          <div key={parkingRequest._id} className='card'>\r\n            <h4 className='card-title'> Parking request id : {parkingRequest._id} </h4>\r\n            <p className='card-text'>  <strong>Destination : </strong>{parkingRequest.destination } </p>\r\n            <p className='card-text'> Arrival Date/Time: {arrivalDateTime}</p>\r\n            <p className='card-text'> Departure Date/Time: {departureDateTime}</p>\r\n            <button className=' btn btn-primary' onClick={()=> handleApprove(parkingRequest._id)}> Approve</button>\r\n            \r\n            <button className='btn btn-primary' onClick={()=> handleReject(parkingRequest._id)}>Reject</button>\r\n\r\n          </div>\r\n        )\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ManageRequests;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}